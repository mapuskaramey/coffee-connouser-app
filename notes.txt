# ---- Routes notes
# When a file is added to the pages directory, it's automatically available as a route
# Client-side navigations to dynamic routes are handled with next/link
# Dynamic routes can be extended to catch all paths by adding three dots (...) inside the brackets. eg. Note: You can use names other than slug, such as: [...param]
# Optional catch all routes - [[...slug]]
# The main difference between catch all and optional catch all routes is that with optional, the route without the parameter is also matched (/post in the example above).
# Types [index route, nested route, dyanamic route]

# ---- getStaticPaths
    # Runs at build time
    # Runs on server side { to check search for `nextjs code elimination` in google & paste code there.}
    
    # Q. when do I use getStaticPaths ?
    # You should use getStaticPaths, If I am statically pre-rendering pages that use dynamic routes,
    eg. 
    - The data comes from a headless CMS
    - The data comes from a database
    - The data comes from a filesystem
    - The data can be publicly cached (not user-specific)

# ---- getStaticProps
    # Q. how does getStaticProps runs regards with getStaticPath
    eg.
    - getStaticProps runs during next build for any paths returned during build time
    - getStaticProps runs in the background when using `fallback: true`
    - getStaticProps is called before initial render when using `fallback: blocking`

# ---- getLocation
    # vanilla javascript


# ---- Note: .env.local
# environment variables specified in this way will always be included in the JavaScript bundle, prefixing the environment variable name with NEXT_PUBLIC_ only has an effect when specifying them through the environment or .env files.


# ---- Study Tools
# next js code elimination [ https://next-code-elimination.vercel.app ]






# ---- Error
while success / failed api response in return object `coffeeStoreData` error, code, message property has been added
